name: PrismX Patch Tests

on:
  pull_request:
    branches:
      - main
    paths:
      - 'patches/patch-*/*'

concurrency:
  group: patch-tests-${{ github.ref }}
  cancel-in-progress: true

jobs:
  generate-matrix:
    name: Generate Patch Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v3

      - name: 🧮 Find Patch Folders
        id: set-matrix
        run: |
          chmod +x .github/scripts/filter-patch-jobs.sh scripts/ci/should-run-patch.sh
          patches=$(find patches -maxdepth 1 -type d -name 'patch-*' \
            -exec test -f {}/test_plan.sh \; -print | sed 's|patches/||')
          filtered=$(echo "$patches" | .github/scripts/filter-patch-jobs.sh)
          matrix=$(echo "$filtered" | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "matrix=${matrix}" >> $GITHUB_OUTPUT
          echo "::set-output name=matrix::${matrix}"

  patch-test:
    name: Run Patch Tests (${{ matrix.patch }})
    needs: generate-matrix
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        patch: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}

    steps:
      - name: 🔁 Skip if no patches found
        if: needs.generate-matrix.outputs.matrix == '[]'
        run: echo "🟡 No valid patches. Matrix skipped."

      - name: 📥 Checkout
        uses: actions/checkout@v3

      - name: 🦀 Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: 🧭 Debug patch folder existence
        run: |
          echo "🔍 Checking for: ./patches/${{ matrix.patch }}/test_plan.sh"
          ls -la ./patches/${{ matrix.patch }} || echo "❌ Patch folder missing"

      - name: 🧰 Set Executable Permissions
        run: |
          if [ -f ./patches/${{ matrix.patch }}/test_plan.sh ]; then
            chmod +x ./patches/${{ matrix.patch }}/test_plan.sh
          fi
          chmod +x ./bin/lint-regression-check.sh || true
          chmod +x scripts/ci/should-run-patch.sh || true

      - name: 🔍 Validate Patch Metadata
        id: runcheck
        run: |
          scripts/ci/should-run-patch.sh "${{ matrix.patch }}" && echo "run=true" >> "$GITHUB_OUTPUT" || echo "run=false" >> "$GITHUB_OUTPUT"

      - name: 🛠️ Build PrismX
        if: steps.runcheck.outputs.run == 'true'
        run: cargo build --release

      - name: 🧪 Run Patch Test Plan
        if: steps.runcheck.outputs.run == 'true'
        run: |
          if [ -f ./patches/${{ matrix.patch }}/test_plan.sh ]; then
            ./patches/${{ matrix.patch }}/test_plan.sh || echo "❌ test_plan.sh failed"
          else
            echo "⚠️ test_plan.sh missing for ${{ matrix.patch }}"
          fi

      - name: ✅ Run Lint Regression Check
        if: steps.runcheck.outputs.run == 'true'
        run: ./bin/lint-regression-check.sh || echo "⚠️ Lint check failed or skipped"

      - name: 📋 Run Patch Linter
        if: steps.runcheck.outputs.run == 'true'
        run: ./bin/patch-lint.sh ${{ matrix.patch }}

      - name: 📄 Generate PATCH_SUMMARY.md
        if: steps.runcheck.outputs.run == 'true'
        run: ./bin/gen-patch-summary.sh ${{ matrix.patch }}

      - name: 📦 Archive Patch Folder
        if: steps.runcheck.outputs.run == 'true'
        run: ./bin/archive-patch.sh ${{ matrix.patch }}

      - name: ☁️ Upload Patch Artifacts
        if: steps.runcheck.outputs.run == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.patch }}-artifact
          path: |
            patches/${{ matrix.patch }}.zip
            patches/${{ matrix.patch }}/PATCH_SUMMARY.md

      - name: 🗃 Archive Patch Summary in Changelog
        if: steps.runcheck.outputs.run == 'true'
        run: |
          mkdir -p changelog/patches
          cp patches/${{ matrix.patch }}/PATCH_SUMMARY.md changelog/patches/${{ matrix.patch }}.md

      - name: 💬 Post Summary to PR (if applicable)
        if: github.event_name == 'pull_request' && steps.runcheck.outputs.run == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_URL: ${{ github.event.pull_request.html_url }}
        run: |
          gh pr comment "$PR_URL" --body "$(cat patches/${{ matrix.patch }}/PATCH_SUMMARY.md)" || echo "⚠️ Could not post PR comment"
